apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

description = 'A spring social repository for Mongodb'
group = 'org.springframework.social'
version = "1.0.0-SNAPSHOT"

sourceCompatibility=1.6
targetCompatibility=1.6

repositories {
    mavenCentral()
    maven {url "http://maven.springframework.org/release"}
}

def springVersion = "3.1.1.RELEASE"
def securityVersion = "3.1.0.RELEASE"
def slf4jVersion = "1.6.1"

dependencies {
	// spring framework
	compile("org.springframework:spring-core:${springVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	compile("org.springframework:spring-context:${springVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}

	// spring security
	compile("org.springframework.security:spring-security-config:${securityVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	compile("org.springframework.security:spring-security-web:${securityVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}

	compile "org.springframework.social:spring-social-core:1.0.2.RELEASE"

	// logging
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
	runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
		"org.slf4j:slf4j-log4j12:${slf4jVersion}",
		"log4j:log4j:1.2.16"

	// JSR 303 with Hibernate Validator
	compile "javax.validation:validation-api:1.0.0.GA",
		"org.hibernate:hibernate-validator:4.0.2.GA"
			
	// GCLIB, required for @Configuration usage
	compile "cglib:cglib-nodep:2.2.2"

	// mongodb
	compile "org.springframework.data:spring-data-mongodb:1.0.1.RELEASE"
	compile "org.mongodb:mongo-java-driver:2.7.3"

	// unit testing
	testCompile "junit:junit:4.10",
		"org.mockito:mockito-core:1.9.0",
		"org.springframework:spring-test:${springVersion}"
}

task createDirs(description: 'Creates the directory for the project.', group: 'Project') << {
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

install {
    repositories.mavenInstaller {
        customizePom(pom, project)
    }
}

def customizePom(pom, gradleProject) {
    pom.whenConfigured { generatedPom ->

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            url = 'https://github.com/SpringSource/spring-social'
            organization {
                name = 'SpringSource'
                url = 'http://springsource.org/spring-social'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
//            scm {
//                url = 'https://github.com/SpringSource/spring-social'
//                connection = 'scm:git:git://github.com/SpringSource/spring-social'
//                developerConnection = 'scm:git:git://github.com/SpringSource/spring-social'
//            }
            developers {
                developer {
                    name = 'Carlo Micieli'
                }
            }

			// For ease of CI builds for those using Maven - can copy pom.xml from build folder.
            build {
                plugins {
                    plugin {
                        groupId = 'org.apache.maven.plugins'
                        artifactId = 'maven-compiler-plugin'
                        configuration {
                            source = '1.6'
                            target = '1.6'
                        }
                    }
                    plugin {
                        groupId = 'org.apache.maven.plugins'
                        artifactId = 'maven-surefire-plugin'
                        configuration {
                            includes {
                                include = '**/*Tests.java'
                            }
                            excludes {
                                exclude = '**/*Abstract*.java'
                            }
                        }
                    }
                }
                resources {
                    resource {
                        directory = 'src/main/java'
                        includes = ['**/*']
                        excludes = ['**/*.java']
                    }
                    resource {
                        directory = 'src/main/resources'
                        includes = ['**/*']
                    }
                }
                testResources {
                    testResource {
                        directory = 'src/test/java'
                        includes = ['**/*']
                        excludes = ['**/*.java']
                    }
                    testResource {
                        directory = 'src/test/resources'
                        includes = ['**/*']
                    }
                }
            }
        }
    }
}
